#include <stdio.h>
#include <omp.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#define WIDTH 40
#define HEIGHT 25

struct data{
	int score;
	float time;
	char name[50]
};

int menu();	//main menu interface
void print_title();
void clear_arena(char arena[WIDTH][HEIGHT]);
void print_arena(char arena[WIDTH][HEIGHT]);
void print_2arena(char arena[WIDTH][HEIGHT]);

int main(){
	int max_used_threads = 3;
	int option, player, dead = 0;
	int i,j,k;
	option = menu();
	
	
	switch (option){
		case 1 : 
			{	//Singleplayer
				player = 1;
				char arena[player][WIDTH][HEIGHT];
				clear_arena(arena[0]);
				print_arena(arena[0]);
				do{
					
					
					
					
					
				} while(dead != 1);
				print_arena(arena[0]);
				
				
				
				
				break;
			}
		case 2 : 
			{	//Local Multiplayer
				
				break;
			}
		case 3 : 
			{	//Leaderboard and save in a file (make a new file if no save file)
				
				break;
			}
		case 4 : 
			{	//How to Play
				
				break;
			}
		case 5 : 
			{	//Exit Game
				printf("Thanks for playing...");
				return 0;
				break;
			}
	}
	
	


	#pragma omp parallel num_threads(max_used_threads)
	{
		int numt = omp_get_thread_num();
		int threads = omp_get_num_threads();
		printf("Hello from thread %d of %d\n", numt, threads);
	}
	return 0;
	
	
	
	
	
	
	
}

int menu(){
	char code;
	int input = 0, maks = 5;
	do{
		print_title();
	
		int i;
		char select[maks][3];
		for(i = 0; i < maks; i++){
			strcpy(select[i],"");
		}
		char option[maks][20];
		strcpy(option[0],"Singleplayer");
		strcpy(option[1],"Local-Multiplayer");
		strcpy(option[2],"Leaderboard");
		strcpy(option[3],"How To Play?");
		strcpy(option[4],"Exit Game");
		
		strcpy(select[input],"-->");
		for(i = 0; i < maks; i++){
			printf("%3s |%s\n", select[i], option[i]);
		}
		code = tolower(getch());
		switch (code){
			case 'w' : 
					input--;
					if(input == -1){
						input = maks-1;
					}
					break;
			case 's' : 
					input++;
					if(input == maks){
						input = 0;
					}
					break;
		}
		system("cls");
	} while (code != '\r');
	return input+1;
}

void clear_arena(char arena[WIDTH][HEIGHT]){
	int i, j;
	for (i = 0; i < HEIGHT; i++){
		for (j = 0; j < WIDTH; j++){
			arena[i][j] = '.';
		}
	}
}

void print_2arena(char arena[WIDTH][HEIGHT]){
	int i, j;
	for (i = 0; i < HEIGHT; i++){
		for (j = 0; j < WIDTH; j++){
			printf("%c", arena[i][j]);
		}
		printf("\t|\t");
		for (j = 0; j < WIDTH; j++){
			printf("%c", arena[i][j]);
		}
		printf("\n");
	}
}

void print_arena(char arena[WIDTH][HEIGHT]){
	int i, j;
	for (i = 0; i < HEIGHT; i++){
		for (j = 0; j < WIDTH; j++){
			printf("%c", arena[i][j]);
		}
		printf("\n");
	}
}

void print_title(){
	printf("\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\n",
		"     _______..______      ___           _______.___________. __    ______ 		",
		"    /       ||   _  \\    /   \\         /       |           ||  |  /      |",
		"   |   (----`|  |_)  |  /  ^  \\       |   (----`---|  |----`|  | |  ,----'",
		"    \\   \\    |   ___/  /  /_\\  \\       \\   \\       |  |     |  | |  |   ",  
		".----)   |   |  |     /  _____  \\  .----)   |      |  |     |  | |  `----.",
		"|_______/    | _|    /__/     \\__\\ |_______/       |__|     |__|  \\______|",
	                                                                          
	    "     _______..______      ___       ______  _______ ",
		"    /       ||   _  \\    /   \\     /      ||   ____|",
		"   |   (----`|  |_)  |  /  ^  \\   |  ,----\'|  |__   ",
		"    \\   \\    |   ___/  /  /_\\  \\  |  |     |   __|  ",
		".----)   |   |  |     /  _____  \\ |  `----.|  |____ ",
		"|_______/    | _|    /__/     \\__\\ \\______||_______|",
	                                                    
		"____    __    ____  ___      .______          _______.",
		"\\   \\  /  \\  /   / /   \\     |   _  \\        /       |",
		" \\   \\/    \\/   / /  ^  \\    |  |_)  |      |   (----`",
		"  \\            / /  /_\\  \\   |      /        \\   \\    ",
		"   \\    /\\    / /  _____  \\  |  |\\  \\----.----)   |   ",
		"    \\__/  \\__/ /__/     \\__\\ | _| `._____|_______/    ");
}


